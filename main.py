import logging
import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters.command import Command
import config
from keyboards import kb1, kb2
from random_fox import fox
from random import randint


API_TOKEN = config.token


logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher()


@dp.message(Command("start"))
async def command_start(message: types.Message):
    name = message.chat.first_name
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç!, {name}", reply_markup=kb1)


#–•–µ–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /fox
@dp.message(Command("fox"))
@dp.message(Command("–õ–∏—Å–∞"))
@dp.message(F.text.lower()=='–ø–æ–∫–∞–∂–∏ –ª–∏—Å—É')
async def cmd_stop(message: types.Message):
    name = message.chat.first_name
    img_fox = fox()
    await message.answer(f"–î–µ—Ä–∂–∏ –ª–∏—Å—É, {name}")
    await message.answer_photo(photo=img_fox)

@dp.message(F.text.lower() == 'num')
async def send_random(message: types.Message):
    number = randint(1, 10)
    await message.answer(f"{number}")

@dp.message(F.text)
async def echo(message: types.Message):
    if "—É—Ä–∞" in message.text:
        await message.answer('–£—Ä–∞-—É—Ä–∞!')
    

@dp.message(F.text)
async def echo(message: types.Message):
    msg_user = message.text.lower()
    name = message.chat.first_name
    if '–ø—Ä–∏–≤–µ—Ç' in msg_user:
        await message.answer(f'–ü—Ä–∏–≤–µ—Ç-–ø—Ä–∏–≤–µ—Ç, {name}')
    elif '–ø–æ–∫–∞' in msg_user:
        await message.answer(f'–ü–æ–∫–∞-–ø–æ–∫–∞, {name}')
    elif '–∫–∏–Ω—å –∫—É–±–∏–∫' in msg_user:
        await message.answer_dice(emoji="üé≤")
    elif '–õ–∏—Å–∞' in msg_user:
        await message.answer(f'–°–º–æ—Ç—Ä–∏ –∫–∞–∫–æ–π —è –∫—Ä–∞—Å–∏–≤—ã–π, {name}', reply_markup=kb2)

    else:
        await message.answer(f'–Ø –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–≥–æ —Å–ª–æ–≤–∞')


async def main():
    await dp.start_polling(bot)


if __name__ == '__main__':
    asyncio.run(main())
